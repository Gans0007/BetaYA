import logging
import config
from aiogram import Bot, types
from aiogram import Router
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F
from aiogram.types import CallbackQuery

from services.confirmations.confirmation_service import was_confirmed_today
from repositories.habits.habit_repo import get_habits_by_user
from services.challenge_service.complete_challenge import complete_challenge
from repositories.habits.habit_repo import should_show_delete_button
from repositories.habits.habit_repo import count_user_habits
from keyboards.monetization import get_main_monetization_menu
from config import ADMIN_ID
from handlers.rules_text import rules_text

logger = logging.getLogger(__name__)

router = Router()


def get_main_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É / —á–µ–ª–ª–µ–Ω–¥–∂"),
                KeyboardButton(text="üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è")
            ],
            [
                KeyboardButton(text="üí∞ –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è"),
                KeyboardButton(text="üì• –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è")
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É / —á–µ–ª–ª–µ–Ω–¥–∂"
@router.message(lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É / —á–µ–ª–ª–µ–Ω–¥–∂")
async def handle_add_habit(message: types.Message):
    user_id = message.from_user.id
    total = await count_user_habits(user_id)

    text = (
        "üìå –í –ø—Ä–∏–≤—ã—á–∫–µ —Ç—ã –º–æ–∂–µ—à—å —Å–∞–º –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ø—Ä–∏–≤—ã—á–∫—É.\n"
        "üî• –ê –≤ Challenge ‚Äî –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–∑ –∑–∞–¥–∞–Ω–∏–π –æ—Ç –∫–æ–º–∞–Ω–¥—ã <b>Your Ambitions</b>.\n\n"
        f"{total}/5"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="add_habit_custom")],
        [InlineKeyboardButton(text="üî• –í–∑—è—Ç—å Challenge", callback_data="take_challenge")]
    ])
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
@router.message(lambda msg: msg.text == "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è")
async def show_active_tasks(message: types.Message, bot: Bot):
    habits = await get_habits_by_user(message.from_user.id)
    if not habits:
        await message.answer("üòê –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.")
        return

    for habit in habits:
        habit_id = habit.id
        name = habit.name
        days = habit.days
        description = habit.description
        done_days = habit.done_days
        is_challenge = habit.is_challenge
        confirm_type = habit.confirm_type

        # üîÅ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
        if is_challenge and done_days >= days:
            await complete_challenge(habit_id, message.from_user.id, bot)
            continue

        title = "üî•<b>–ê–∫—Ç–∏–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂:</b>" if is_challenge else "‚ö°Ô∏è<b>–ê–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞:</b>"
        percent = round((done_days / days) * 100) if days > 0 else 0

        text = (
            f"{title}\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
            f"<b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {done_days} –∏–∑ {days} –¥–Ω–µ–π  <b>( {percent}% ) </b>"
        )

        buttons = []

        # üèÅ –ü—Ä–∏–≤—ã—á–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å
        if not is_challenge and done_days == days:
            buttons = [
                InlineKeyboardButton(
                    text="ü´† –ó–∞–≤–µ—Ä—à–∏—Ç—å",
                    callback_data=f"complete_habit_{habit_id}"
                ),
                InlineKeyboardButton(
                    text="ü´° –ü—Ä–æ–¥–ª–∏—Ç—å",
                    callback_data=f"extend_habit_{habit_id}"
                )
            ]
        else:
            # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            btn_text = (
                "‚è∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å (–¥–æ +4 –º–∏–Ω)"
                if confirm_type == "wake_time"
                else "‚ôªÔ∏è –ü–µ—Ä–µ–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" if await was_confirmed_today(message.from_user.id, habit_id)
                else "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
            )
            buttons.append(
                InlineKeyboardButton(
                    text=btn_text,
                    callback_data=f"confirm_done_{habit_id}"
                )
            )

            if await should_show_delete_button(message.from_user.id, habit_id):
                buttons.append(
                    InlineKeyboardButton(
                        text="üóë –£–¥–∞–ª–∏—Ç—å",
                        callback_data=f"delete_habit_{habit_id}"
                    )
                )

        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[buttons])
        )

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ú–û–ù–ï–¢–ò–ó–ê–¶–ò–Ø
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
async def send_monetization_menu(bot: Bot, chat_id: int, is_admin: bool):
    text = (
        "üí∏ <b>–ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è</b>\n\n"
        "–¢–≤–æ–π –ø—É—Ç—å –∫ –∑–∞—Ä–∞–±–æ—Ç–∫—É —Å <b>Your Ambitions</b> üíº\n\n"
        "–í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å:"
    )

    keyboard = [
        [
            InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
            InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="monetization_referral")
        ],
        [
            InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ", callback_data="upload_video"),
            InlineKeyboardButton(text="üìö –ü—Ä–∞–≤–∏–ª–∞", callback_data="monetization_rules")
        ]
    ]

    if is_admin:
        keyboard.append([InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–µ–Ω–∏–µ", callback_data="review_pending_videos")])

    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await bot.send_message(chat_id, text, reply_markup=markup, parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üí∞ –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è"
@router.message(lambda msg: msg.text == "üí∞ –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è")
async def handle_monetization(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –û—Ç–∫—Ä—ã–ª –º–µ–Ω—é –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏")

    keyboard = get_main_monetization_menu(is_admin=(user_id == config.ADMIN_ID))
    await bot.send_message(
        chat_id=message.chat.id,
        text="üí∏ <b>–ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è</b>\n\n–¢–≤–æ–π –ø—É—Ç—å –∫ –∑–∞—Ä–∞–±–æ—Ç–∫—É —Å <b>Your Ambitions</b> üíº\n\n–í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "monetization_back")
async def handle_monetization_back(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    is_admin = (user_id == config.ADMIN_ID)
    keyboard = get_main_monetization_menu(is_admin=is_admin)

    await callback.answer()
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text="üí∏ <b>–ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è</b>\n\n–¢–≤–æ–π –ø—É—Ç—å –∫ –∑–∞—Ä–∞–±–æ—Ç–∫—É —Å <b>Your Ambitions</b> üíº\n\n–í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "monetization_rules")
async def handle_monetization_rules(callback: CallbackQuery):
    await callback.answer()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìå –ü—Ä–∏–º–µ—Ä—ã –º–µ–¥–∏–∞", callback_data="rules_examples")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="monetization_back")]
    ])

    await callback.message.answer(rules_text, reply_markup=keyboard, parse_mode="HTML")

