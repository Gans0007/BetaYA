import asyncio
import random
from datetime import timedelta
from utils.timezones import get_current_time
from repositories.habits.habit_repo import get_unconfirmed_today
from repositories.users.user_repo import get_all_user_ids
from aiogram import Bot
import random

MIN_HOUR = 8
MAX_HOUR = 21

import logging
logger = logging.getLogger(__name__)

async def scheduled_reminder_loop(bot: Bot):
    first_run = True

    while True:
        now = get_current_time()

        # üïê –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ ‚Äî —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
        if first_run or (now.hour == 8 and now.minute == 0):
            first_run = False  # –æ—Ç–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            print(f"üöÄ [REMINDER] –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ {now.date()}")

            user_ids = await get_all_user_ids()
            for user_id in user_ids:
                habits = await get_unconfirmed_today(user_id)
                for habit in habits:
                    # –†–∞–Ω–¥–æ–º–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–Ω—è)
                    rand_hour = random.randint(MIN_HOUR, MAX_HOUR)
                    rand_min = random.randint(0, 59)
                    send_time = now.replace(hour=rand_hour, minute=rand_min, second=0, microsecond=0)

                    if send_time <= now:
                        send_time += timedelta(days=1)

                    delay = (send_time - now).total_seconds()
                    logger.info(f"[REMINDER] üß† habit_id={habit.id}, user_id={user_id} –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –Ω–∞ {send_time.strftime('%H:%M')}")
                    asyncio.create_task(send_delayed_reminder(bot, user_id, habit, delay))

        await asyncio.sleep(60)

async def send_delayed_reminder(bot: Bot, user_id: int, habit, delay: float):
    await asyncio.sleep(delay)

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ª–∏ —É–∂–µ
    updated = await get_unconfirmed_today(user_id)
    if not any(h.id == habit.id for h in updated):
        return  # —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–∏—á–µ–≥–æ –Ω–µ —Å–ª–∞—Ç—å

    # ‚úÖ –†–∞–Ω–¥–æ–º–Ω—ã–µ —Ñ—Ä–∞–∑—ã –≤ —Å—Ç–∏–ª–µ –°–æ–∑–¥–∞—Ç–µ–ª—è
    phrases = [
        "‚ö†Ô∏è –ù–µ –ª–µ–Ω–∏—Å—å, —Ä–æ–¥–Ω–æ–π(–∞—è)! \n\n–ì–¥–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ ‚Äî —Ç–∞–º –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏: ¬´{name}¬ª ({done}/{total})",
        "‚ö†Ô∏è –ù–µ –ª–µ–Ω–∏—Å—å, —Ä–æ–¥–Ω–æ–π(–∞—è)! \n\n–ë—Ä–∞—Ç, –ø–æ–±–µ–¥–∞ –Ω–µ –∂–¥—ë—Ç. –í—Ä–µ–º—è: ¬´{name}¬ª ({done}/{total})",
        "‚ö†Ô∏è –ù–µ –ª–µ–Ω–∏—Å—å, —Ä–æ–¥–Ω–æ–π(–∞—è)! \n\n–¢—ã –≤—ã–±—Ä–∞–ª –ø—É—Ç—å —Å–∏–ª—å–Ω—ã—Ö. –ó–∞–≤–µ—Ä—à–∏: ¬´{name}¬ª ({done}/{total})",
        "‚ö†Ô∏è –ù–µ –ª–µ–Ω–∏—Å—å, —Ä–æ–¥–Ω–æ–π(–∞—è)! \n\n–ü—Ä–∏–≤—ã—á–∫–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä: ¬´{name}¬ª ({done}/{total})",
        "‚ö†Ô∏è –ù–µ –ª–µ–Ω–∏—Å—å, —Ä–æ–¥–Ω–æ–π(–∞—è)! \n\n–¢—ã —Å—Ç—Ä–æ–∏—à—å —Å–µ–±—è. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø—Ä–∏–≤—ã—á–∫—É: ¬´{name}¬ª ({done}/{total})",
        "‚ö†Ô∏è –ù–µ –ª–µ–Ω–∏—Å—å, —Ä–æ–¥–Ω–æ–π(–∞—è)! \n\n–°–∏–ª—å–Ω—ã–µ –Ω–µ –∏—â—É—Ç –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π. –°–¥–µ–ª–∞–π: ¬´{name}¬ª ({done}/{total})",
        "‚ö†Ô∏è –ù–µ –ª–µ–Ω–∏—Å—å, —Ä–æ–¥–Ω–æ–π(–∞—è)! \n\n–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Ä–µ—à–∞–µ—Ç. –°–µ–≥–æ–¥–Ω—è —Ç—ã –ø–æ–±–µ–¥–∏—à—å —Å–µ–±—è! ¬´{name}¬ª ({done}/{total})",
        "‚ö†Ô∏è –ù–µ –ª–µ–Ω–∏—Å—å, —Ä–æ–¥–Ω–æ–π(–∞—è)! \n\n–†–æ–¥–Ω–∏—á–µ–∫, —É —Ç–µ–±—è –µ—Å—Ç—å –µ—â—ë –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞: ¬´{name}¬ª ({done}/{total})",
        "‚ö†Ô∏è –ù–µ –ª–µ–Ω–∏—Å—å, —Ä–æ–¥–Ω–æ–π(–∞—è)! \n\n–¶–µ–ª—å –±–ª–∏–∑–∫–æ. –ü–æ–¥–Ω–∏–º–∞–π –∂–æ–ø—É, –ø–æ—Ä–∞: ¬´{name}¬ª ({done}/{total})",
        "‚ö†Ô∏è –ù–µ –ª–µ–Ω–∏—Å—å, —Ä–æ–¥–Ω–æ–π(–∞—è)! \n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ —Ç—ã –≤ –∏–≥—Ä–µ. –ï—Å—Ç—å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞: ¬´{name}¬ª ({done}/{total})"
    ]

    text = random.choice(phrases).format(
        name=habit.name,
        done=habit.done_days,
        total=habit.days
    )

    try:
        await bot.send_message(user_id, text)
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({habit.name}): {e}")
