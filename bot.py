import asyncio
import logging
import os
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from config import BOT_TOKEN
from init_db import init_db
from utils.reset_task import start_reset_scheduler
from routers_register import register_all_routers

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs("logs", exist_ok=True)

# –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥-—Ñ–∞–π–ª (–≤—Å—ë –ø–æ–¥—Ä—è–¥)
main_handler = logging.FileHandler("logs/bot.log", encoding='utf-8')
main_handler.setLevel(logging.INFO)

# –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è –æ—à–∏–±–æ–∫
error_handler = logging.FileHandler("logs/critical.log", encoding='utf-8')
error_handler.setLevel(logging.ERROR)

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –ª–æ–≥
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä—ã
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    handlers=[
        main_handler,
        error_handler,
        console_handler
    ]
)

logger = logging.getLogger(__name__)


async def main():
    await init_db()
    logger.info("üì¶ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

    # üîÅ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤
    await register_all_routers(dp)
    logger.info("üîÅ –†–æ—É—Ç–µ—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

    # ‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å –ø—Ä–∏–≤—ã—á–µ–∫
    asyncio.create_task(start_reset_scheduler(bot))
    logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–±—Ä–æ—Å–∞ –ø—Ä–∏–≤—ã—á–µ–∫ –∑–∞–ø—É—â–µ–Ω.")

    # üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
