import asyncio
from datetime import datetime, timedelta
import pytz
from aiogram import Bot
from config import BOT_TOKEN
from pathlib import Path

from repositories.users.user_repo import get_all_users_with_active_habits
from repositories.habits.habit_reset_repo import reset_unconfirmed_habits, reset_unconfirmed_challenges

RESET_FILE_PATH = Path(__file__).resolve().parent / "last_reset.txt"

def get_last_reset_date():
    if RESET_FILE_PATH.exists():
        return RESET_FILE_PATH.read_text().strip()
    return ""

def update_last_reset_date(date_str):
    RESET_FILE_PATH.write_text(date_str)



async def perform_reset(bot: Bot):
    user_ids = await get_all_users_with_active_habits()
    for user_id in user_ids:
        # –°–±—Ä–æ—Å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
        dropped_habits = await reset_unconfirmed_habits(user_id)
        if dropped_habits:
            for habit_name in dropped_habits:
                try:
                    await bot.send_message(
                        user_id,
                        f"‚õîÔ∏è –ü—Ä–∏–≤—ã—á–∫–∞ <b>{habit_name}</b> –Ω–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–æ 00:00 –ø–æ –ö–∏–µ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.\n–ü—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω."
                    )
                except:
                    pass  # –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏

        # –°–±—Ä–æ—Å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
        dropped_challenges = await reset_unconfirmed_challenges(user_id)
        if dropped_challenges:
            for challenge_name in dropped_challenges:
                try:
                    await bot.send_message(
                        user_id,
                        f"‚õîÔ∏è –ß–µ–ª–ª–µ–Ω–¥–∂ <b>{challenge_name}</b> –Ω–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –¥–æ 00:00 –ø–æ –ö–∏–µ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.\n–ü—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω."
                    )
                except:
                    pass  # –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏

    update_last_reset_date(datetime.now(pytz.timezone("Europe/Kyiv")).date().isoformat())



async def start_reset_scheduler(bot: Bot):
    # üîÅ –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω –ª–∏ —Å–±—Ä–æ—Å
    now = datetime.now(pytz.timezone("Europe/Kyiv"))
    today_str = now.date().isoformat()
    last_reset = get_last_reset_date()

    if last_reset != today_str and now.time().hour >= 0:
        await perform_reset(bot)

    while True:
        now = datetime.now(pytz.timezone("Europe/Kyiv"))
        next_reset = now.replace(hour=0, minute=0, second=0, microsecond=0)
        if now >= next_reset:
            next_reset += timedelta(days=1)
        sleep_time = (next_reset - now).total_seconds()

        await asyncio.sleep(sleep_time)
        await perform_reset(bot)
