import logging
import asyncio
import random
from datetime import datetime, timedelta
from aiogram import Bot
from utils.reminder_storage import add_reminder, remove_reminder, get_reminder, cancel_all_reminders
from aiogram.exceptions import TelegramForbiddenError, TelegramNetworkError

from repositories.users.user_repo import get_all_users_with_active_habits
from repositories.habits.habit_repo import get_unconfirmed_today

logger = logging.getLogger(__name__)
MIN_HOUR, MAX_HOUR = 9, 20

async def schedule_reminder(bot: Bot, user_id: int, habit_id: int):
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –Ω–µ–ø—Ä–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏,
    –µ—Å–ª–∏ –æ–Ω–æ –µ—â—ë –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ —É–∂–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    existing = get_reminder(user_id, habit_id)
    if existing:
        logger.debug(f"[REMINDER] –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è habit={habit_id} user={user_id} —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")
        return

    now = datetime.now()
    target_hour = random.randint(MIN_HOUR, MAX_HOUR)
    target_minute = random.randint(0, 59)
    target_time = now.replace(hour=target_hour, minute=target_minute, second=0, microsecond=0)
    if target_time < now:
        target_time += timedelta(days=1)
    delay = (target_time - now).total_seconds()

    logger.info(f"[REMINDER] –î–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ {habit_id} (user={user_id}) ‚Äî –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {target_time}")
    task = asyncio.create_task(remind_once(bot, user_id, habit_id, delay))
    add_reminder(user_id, habit_id, task)



async def remind_once(bot: Bot, user_id: int, habit_id: int, delay: float):
    await asyncio.sleep(delay)

    try:
        habits = await get_unconfirmed_today(user_id)
        habit = next((h for h in habits if h.id == habit_id), None)
        if not habit:
            remove_reminder(user_id, habit_id)
            return

        text = (
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ¬´{habit.name}¬ª "
            f"({habit.done_days} / {habit.days})\n\n"
            "‚ö†Ô∏è –ï—Å–ª–∏ —Ç—ã –ø—Ä–æ–ø—É—Å—Ç–∏—à—å –¥–µ–Ω—å ‚Äî —Å—á—ë—Ç—á–∏–∫ –∞–Ω–Ω—É–ª–∏—Ä—É–µ—Ç—Å—è."
        )

        await bot.send_message(user_id, text)
        logger.info(f"[REMINDER] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ –ø—Ä–∏–≤—ã—á–∫–µ {habit_id}")

    except TelegramForbiddenError:
        logger.warning(f"[REMINDER] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
    except TelegramNetworkError as e:
        logger.warning(f"[REMINDER] üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    except ConnectionError as e:
        logger.warning(f"[REMINDER] üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    except Exception as e:
        logger.exception(f"[REMINDER] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    finally:
        remove_reminder(user_id, habit_id)


async def send_reminders(bot: Bot):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è APScheduler –∫–∞–∂–¥—ã–π —á–∞—Å:
    –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –Ω–µ–ø—Ä–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
    """
    try:
        users = await get_all_users_with_active_habits()
        for user_id in users:
            habits = await get_unconfirmed_today(user_id)
            for habit in habits:
                await schedule_reminder(bot, user_id, habit.id)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≤ send_reminders")

async def reset_all_reminders():
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–±—Ä–æ—Å–µ –ø—Ä–∏–≤—ã—á–µ–∫).
    """
    cancel_all_reminders()
