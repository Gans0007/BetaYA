from aiogram import Router
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest


from services.habits.habit_service import save_habit
from repositories.habits.habit_repo import get_habits_by_user, habit_exists
from repositories.habits.habit_repo import count_user_habits

import logging
logger = logging.getLogger(__name__)

router = Router()

# –£—Ä–æ–≤–Ω–∏ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
LEVELS = {
    "level_1": "üî∞ –ù–æ–≤–∏—á–æ–∫",
    "level_2": "üö∂ –û—Å–Ω–æ–≤—ã –∫–æ–Ω—Ç—Ä–æ–ª—è",
    "level_3": "üß† –§–æ–∫—É—Å –∏ —ç–Ω–µ—Ä–≥–∏—è",
    "level_4": "üîí –°–∞–º–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞",
    "level_5": "üß± –ü—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ",
    "level_6": "‚è∞ –†–∞–Ω–Ω–∏–π –ø–æ–¥—ä—ë–º",
}

# 2) –ß–µ–ª–ª–µ–Ω–¥–∂–∏: (–Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Ç–∏–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
CHALLENGES = {
    "level_1": [
        ("–ë–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Ç—Ä–æ–º", "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –ø–µ—Ä–≤—ã–µ 30 –º–∏–Ω—É—Ç", 7, "media"),
        ("–ó–∞—Ä—è–¥–∫–∞ 5 –º–∏–Ω—É—Ç", "–°–¥–µ–ª–∞—Ç—å –ª—ë–≥–∫—É—é –∑–∞—Ä—è–¥–∫—É 5 –º–∏–Ω—É—Ç —É—Ç—Ä–æ–º", 14, "media"),
        ("–ü—Ä–æ–≥—É–ª–∫–∞ 10 –º–∏–Ω—É—Ç", "–í—ã–π—Ç–∏ –Ω–∞ —É–ª–∏—Ü—É –º–∏–Ω–∏–º—É–º –Ω–∞ 10 –º–∏–Ω—É—Ç", 7, "media"),
        ("–°–æ–Ω –¥–æ 23:00", "–õ–µ—á—å —Å–ø–∞—Ç—å –¥–æ 23:00", 21, "media"),
        ("–£—Ç—Ä–µ–Ω–Ω—è—è –≤–æ–¥–∞", "–ü–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è", 30, "media"),
    ],
    "level_2": [
        ("30 –º–∏–Ω –≥–ª—É–±–æ–∫–æ–≥–æ —á—Ç–µ–Ω–∏—è", "–ß—Ç–µ–Ω–∏–µ –±–µ–∑ –æ—Ç–≤–ª–µ—á–µ–Ω–∏—è", 14, "media"),
        ("5000 —à–∞–≥–æ–≤", "–ü—Ä–æ–π—Ç–∏ –º–∏–Ω–∏–º—É–º 5000 —à–∞–≥–æ–≤ –∑–∞ –¥–µ–Ω—å", 30, "media"),
        ("–ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏", "–ü–æ–≤—Ç–æ—Ä—è—Ç—å —Å–≤–æ—é —Ñ–æ—Ä–º—É–ª—É —Å–∏–ª—ã", 21, "media"),
        ("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–ª–∏", "5 –º–∏–Ω—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", 21, "media"),
        ("–î–Ω–µ–≤–Ω–∏–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã", "–ü–∏—à–∏ –∏—Ç–æ–≥–∏ –∏ –æ—à–∏–±–∫–∏ –¥–Ω—è", 30, "media"),
        ("–ö—Ä—É–∂–æ–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å", "–ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å/–≤–∏–¥–µ–æ", 14, "media"),
        ("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω—è", "–ó–∞–ø–∏—Å–∞—Ç—å 3 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –¥–µ–Ω—å", 7, "media"),
        ("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 10 –º–∏–Ω", "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ñ–∏–∑–Ω–∞–≥—Ä—É–∑–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å", 14, "media"),
        ("–£—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤", "–ó–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ —Ç—Ä–∞—Ç—ã –∑–∞ –¥–µ–Ω—å", 30, "media"),
        ("–ß—Ç–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç", "–ß–∏—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ö–æ—Ç—è –±—ã 10 –º–∏–Ω—É—Ç", 21, "media"),
    ],
    "level_3": [
        ("–ë–µ–∑ –º–∞—Ç–∞", "–°–ª–µ–¥–∏—Ç—å –∑–∞ —Ä–µ—á—å—é, –∏—Å–∫–ª—é—á–∏—Ç—å –º–∞—Ç", 30, "media"),
        ("–ë–µ–∑ —Å–∞—Ö–∞—Ä–∞", "–ù–µ —É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å —Å–∞—Ö–∞—Ä –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è", 21, "media"),
        ("–ë–µ–∑ —Ñ–∞—Å—Ç—Ñ—É–¥–∞", "–ù–∏ –æ–¥–Ω–æ–π –≤—Ä–µ–¥–Ω–æ–π –µ–¥—ã", 21, "media"),
        ("–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç –Ω–µ–∑–Ω–∞–∫–æ–º—Ü—É", "–°–¥–µ–ª–∞–π –∏—Å–∫—Ä–µ–Ω–Ω–∏–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç", 7, "media"),
        ("–ú–µ–¥–∏—Ç–∞—Ü–∏—è", "–ú–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å", 14, "media"),
        ("–ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –º—ã—Å–ª—è–º–∏", "5 –º–∏–Ω –±–µ–∑ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –º—ã—Å–ª–∏", 14, "media"),
        ("–ü–æ—Å—Ç –≤ Telegram", "–ü–∏—Å–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç—á—ë—Ç –∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é", 30, "media"),
        ("–£—á—ë–±–∞", "30 –º–∏–Ω—É—Ç –æ–±—É—á–µ–Ω–∏—è –∏–ª–∏ —á—Ç–µ–Ω–∏—è –∫—É—Ä—Å–∞", 21, "media"),
        ("–•–æ–¥—å–±–∞ –±–æ—Å–∏–∫–æ–º", "15 –º–∏–Ω—É—Ç –±–æ—Å–∏–∫–æ–º", 14, "media"),
        ("–•–æ–ª–æ–¥–Ω—ã–π –¥—É—à", "–ü—Ä–∏–Ω—è—Ç—å —Ö–æ–ª–æ–¥–Ω—ã–π –¥—É—à –∏–ª–∏ –æ–±–ª–∏–≤–∞–Ω–∏–µ", 7, "media"),
        ("–ß–∞—Å –º–æ–ª—á–∞–Ω–∏—è", "–ü–æ–ª–Ω–æ–µ –º–æ–ª—á–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞", 7, "media"),
    ],
    "level_4": [
        ("10 000 —à–∞–≥–æ–≤", "–ü—Ä–æ–π—Ç–∏ 10 000 —à–∞–≥–æ–≤ –∑–∞ –¥–µ–Ω—å", 30, "media"),
        ("10 –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–π", "–°–¥–µ–ª–∞—Ç—å 10 –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–π –ø–æ–¥—Ä—è–¥", 14, "media"),
        ("50 –æ—Ç–∂–∏–º–∞–Ω–∏–π", "–°–¥–µ–ª–∞—Ç—å 50 –æ—Ç–∂–∏–º–∞–Ω–∏–π –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", 14, "media"),
        ("–ë–µ–≥ 3 –∫–º", "–ü—Ä–æ–±–µ–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 –∫–º", 21, "media"),
        ("–ë–µ–∑ –∑–µ—Ä–∫–∞–ª", "–ù–µ —Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∑–µ—Ä–∫–∞–ª–æ", 30, "media"),
        ("–û—Ç–¥—ã—Ö –Ω–∞ –∫–æ–ª–µ–Ω—è—Ö", "–û—Ç–¥—ã—Ö–∞—Ç—å —Å–∏–¥—è –Ω–∞ –∫–æ–ª–µ–Ω—è—Ö", 14, "media"),
        ("–ü—Ä–æ—Å–∏—Ç—å —Å–∫–∏–¥–∫—É", "–ò–¥–∏ –∏ –ø–æ–ø—Ä–æ—Å–∏ —Å–∫–∏–¥–∫—É", 7, "media"),
        ("–¢–∏—à–∏–Ω–∞", "–ù–∏–∫–∞–∫–æ–π –º—É–∑—ã–∫–∏ –≤–µ—Å—å –¥–µ–Ω—å", 7, "media"),
        ("–•–æ–ª–æ–¥–Ω—ã–π –¥—É—à", "–•–æ–ª–æ–¥–Ω—ã–π –¥—É—à –∏ –∫—Ä—É–∂–æ–∫-—Ä–µ–∞–∫—Ü–∏—è", 14, "media"),
        ("–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–µ—Ç–æ–∫—Å", "–ù–µ –∑–∞—Ö–æ–¥–∏—Ç—å –≤ —Å–æ—Ü—Å–µ—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è", 21, "media"),
    ],
    "level_5": [
        ("1 –ø—Ä–∏—ë–º –ø–∏—â–∏ –≤ –¥–µ–Ω—å", "–ï—Å—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å", 7, "media"),
        ("2 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –¥–µ–Ω—å", "–î–≤–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ", 14, "media"),
        ("NoFap", "–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å —Å–µ–∫—Å—É–∞–ª—å–Ω—ã—Ö –∏–º–ø—É–ª—å—Å–æ–≤", 30, "media"),
        ("–ë–µ–∑ –ø–æ—Ä–Ω–æ", "–ù–∏–∫–∞–∫–æ–≥–æ –ø–æ—Ä–Ω–æ–∫–æ–Ω—Ç–µ–Ω—Ç–∞", 30, "media"),
        ("–ü–ª–∞–Ω–∫–∞", "–î–µ–ª–∞–π –ø–ª–∞–Ω–∫—É –º–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥", 14, "media"),
        ("–ü–æ–¥—ä—ë–º –≤ 4:30", "–ü—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è —Ä–æ–≤–Ω–æ –≤ 4:30 —É—Ç—Ä–∞", 21, "media"),
        ("–°–µ–Ω—Å–æ—Ä–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è", "–ù–∏–∫–∞–∫–∏—Ö –∑–≤—É–∫–æ–≤, –≤–∏–¥–µ–æ, —Å–æ—Ü—Å–µ—Ç–µ–π", 7, "media"),
        ("–¢–µ–ª–µ—Ñ–æ–Ω –≤ –∫–æ—Ä–æ–±–∫–µ", "–£–±–∏—Ä–∞–π —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —è—â–∏–∫/–∫–æ—Ä–æ–±–∫—É –Ω–∞ 2+ —á–∞—Å–∞ –≤ –¥–µ–Ω—å", 14, "media"),
        ("–¢–æ–ª—å–∫–æ –ª–µ—Å—Ç–Ω–∏—Ü–∞", "–ù–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª–∏—Ñ—Ç–æ–º ‚Äî —Ç–æ–ª—å–∫–æ –ª–µ—Å—Ç–Ω–∏—Ü–∞", 7, "media"),
        ("–§–æ–∫—É—Å 2 —á–∞—Å–∞", "2 —á–∞—Å–∞ —Ä–∞–±–æ—Ç—ã –±–µ–∑ –æ—Ç–≤–ª–µ—á–µ–Ω–∏–π", 21, "media"),
    ],
    "level_6": [
        ("–ü–æ–¥—ä–µ–º –≤ 7:00", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ–∂–¥—É 7:00 –∏ 7:04, –∏–Ω–∞—á–µ —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", 30, "wake_time"),
        ("–ü–æ–¥—ä–µ–º –≤ 6:30", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ–∂–¥—É 6:30 –∏ 6:34, –∏–Ω–∞—á–µ —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", 30, "wake_time"),
        ("–ü–æ–¥—ä–µ–º –≤ 6:00", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ–∂–¥—É 6:00 –∏ 6:04, –∏–Ω–∞—á–µ —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", 30, "wake_time"),
        ("–ü–æ–¥—ä–µ–º –≤ 5:30", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ–∂–¥—É 5:30 –∏ 5:34, –∏–Ω–∞—á–µ —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", 30, "wake_time"),
        ("–ü–æ–¥—ä–µ–º –≤ 5:00", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ–∂–¥—É 5:00 –∏ 5:04, –∏–Ω–∞—á–µ —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", 30, "wake_time"),
    ],
}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def build_levels_keyboard():
    kb = InlineKeyboardMarkup(inline_keyboard=[], row_width=1)
    for key, label in LEVELS.items():
        btn = InlineKeyboardButton(text=label, callback_data=f"select_level:{key}")
        kb.inline_keyboard.append([btn])

    # ‚úÖ –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    kb.inline_keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø—Ä–∏–≤—ã—á–µ–∫", callback_data="back_to_habit_menu")
    ])
    return kb


def build_challenges_keyboard(level_key: str):
    items = CHALLENGES.get(level_key, [])
    kb = InlineKeyboardMarkup(inline_keyboard=[], row_width=1)
    for idx, (title, desc, days, ctype) in enumerate(items):
        btn = InlineKeyboardButton(
            text=f"{title} ({days} –¥–Ω.)",
            callback_data=f"select_challenge:{level_key}:{idx}"
        )
        kb.inline_keyboard.append([btn])
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="take_challenge")])
    return kb

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@router.callback_query(lambda c: c.data == "take_challenge")
async def show_levels_menu(callback: CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"[{user_id}] –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é —É—Ä–æ–≤–Ω–µ–π —á–µ–ª–ª–µ–Ω–¥–∂–µ–π")

    try:
        if callback.message.text != "–í—ã–±–∏—Ä–∞–π –ë—Ä–∞—Ç":
            await callback.message.edit_text("–í—ã–±–∏—Ä–∞–π –ë—Ä–∞—Ç", reply_markup=build_levels_keyboard())
        else:
            await callback.message.edit_reply_markup(reply_markup=build_levels_keyboard())
        await callback.answer()

    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer()
            return
        logger.exception(f"[{user_id}] TelegramBadRequest –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é —É—Ä–æ–≤–Ω–µ–π: {e}")
        await callback.answer("‚ö†Ô∏è Telegram –≤—ã–¥–∞–ª –æ—à–∏–±–∫—É (BadRequest)", show_alert=True)

    except Exception as e:
        logger.exception(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é —É—Ä–æ–≤–Ω–µ–π: {e}")
        try:
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —É—Ä–æ–≤–Ω–µ–π", show_alert=True)
        except TelegramBadRequest:
            pass

@router.callback_query(lambda c: c.data.startswith("select_level:"))
async def show_challenges(callback: CallbackQuery):
    user_id = callback.from_user.id
    await callback.answer()

    try:
        _, level_key = callback.data.split(":", 1)
        logger.info(f"[{user_id}] –í—ã–±—Ä–∞–ª —É—Ä–æ–≤–µ–Ω—å: {level_key} ({LEVELS.get(level_key)})")

        await callback.message.edit_text(
            f"üèÖ –ß–µ–ª–ª–µ–Ω–¥–∂–∏ —É—Ä–æ–≤–Ω—è {LEVELS[level_key]}",
            reply_markup=build_challenges_keyboard(level_key)
        )
    except Exception as e:
        logger.exception(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π —É—Ä–æ–≤–Ω—è {level_key}: {e}")
        try:
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π.")
        except Exception:
            pass

@router.callback_query(lambda c: c.data.startswith("select_challenge:"))
async def confirm_challenge(callback: CallbackQuery):
    user_id = callback.from_user.id

    try:
        _, level_key, idx_str = callback.data.split(":", 2)
        idx = int(idx_str)
        title, desc, days, ctype = CHALLENGES[level_key][idx]

        logger.info(f"[{user_id}] –û—Ç–∫—Ä—ã–ª –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞: '{title}' (–¥–Ω–∏={days}, —Ç–∏–ø={ctype})")

        text = (
            f"üî•<b>–ê–∫—Ç–∏–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂:</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
            f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {days} –¥–Ω–µ–π\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {desc}\n\n"
            f"–î–æ–±–∞–≤–∏—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏?"
        )

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í–∑—è—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂", callback_data=f"add_challenge:{level_key}:{idx}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_level:{level_key}")]
        ])

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
        await callback.answer()

    except Exception as e:
        logger.exception(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ —É—Ä–æ–≤–Ω—è {level_key}: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞", show_alert=True)

@router.callback_query(lambda c: c.data.startswith("add_challenge:"))
async def add_challenge(callback: CallbackQuery):
    user_id = callback.from_user.id
    await callback.answer()

    from repositories.habits.habit_repo import count_user_habits  # (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω)
    total_habits = await count_user_habits(user_id)
    if total_habits >= 5:
        await callback.message.answer("‚ùå –£ —Ç–µ–±—è —É–∂–µ 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –∏–ª–∏ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π. –£–¥–∞–ª–∏ –æ–¥–Ω—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é.")
        return

    try:
        _, level_key, idx_str = callback.data.split(":", 2)
        idx = int(idx_str)
        title, desc, days, ctype = CHALLENGES[level_key][idx]

        if await habit_exists(user_id, title):
            logger.warning(f"[{user_id}] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ '{title}' ‚Äî —É–∂–µ –µ—Å—Ç—å")
            await callback.message.answer("‚ùå –≠—Ç–æ—Ç —á–µ–ª–ª–µ–Ω–¥–∂ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!")
            return

        logger.info(f"[{user_id}] –î–æ–±–∞–≤–ª—è–µ—Ç —á–µ–ª–ª–µ–Ω–¥–∂ '{title}' (–¥–Ω–∏={days}, —Ç–∏–ø={ctype})")

        await save_habit(
            user_id=user_id,
            name=title,
            days=days,
            description=desc,
            is_challenge=True,
            confirm_type=ctype
        )

        habits = await get_habits_by_user(user_id)
        habit_id = habits[-1][0] if habits else None

        logger.info(f"[{user_id}] –ß–µ–ª–ª–µ–Ω–¥–∂ '{title}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, habit_id={habit_id}")
        await callback.message.edit_text("‚úÖ –ß–µ–ª–ª–µ–Ω–¥–∂ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏!")

    except Exception as e:
        logger.exception(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        try:
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂")
        except Exception:
            pass


@router.callback_query(lambda c: c.data == "back_to_habit_menu")
async def back_to_habit_menu(callback: CallbackQuery):
    from repositories.habits.habit_repo import count_user_habits
    total = await count_user_habits(callback.from_user.id)

    text = (
        "üìå –í –ø—Ä–∏–≤—ã—á–∫–µ —Ç—ã –º–æ–∂–µ—à—å —Å–∞–º –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ø—Ä–∏–≤—ã—á–∫—É.\n"
        "üî• –ê –≤ Challenge ‚Äî –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–∑ –∑–∞–¥–∞–Ω–∏–π –æ—Ç –∫–æ–º–∞–Ω–¥—ã <b>Your Ambitions</b>.\n\n"
        f"{total}/5"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="add_habit_custom")],
        [InlineKeyboardButton(text="üî• –í–∑—è—Ç—å Challenge", callback_data="take_challenge")]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()
