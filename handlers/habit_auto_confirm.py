import logging
from datetime import datetime, timedelta
from aiogram import Bot

import pytz
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from states.habit_states import ConfirmHabit
from services.confirmations.confirmation_service import (
    process_confirmation,
    send_to_public_chat
)
from repositories.habits.habit_repo import get_habits_by_user, get_habit_by_id

logger = logging.getLogger(__name__)
router = Router()

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message(F.photo | F.video | F.video_note)
async def handle_media_no_state(message: Message, state: FSMContext):
    if message.chat.type != "private":
        return

    user_id = message.from_user.id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
    if message.photo:
        file_id = message.photo[-1].file_id
        file_type = "photo"
    elif message.video:
        file_id = message.video.file_id
        file_type = "video"
    elif message.video_note:
        file_id = message.video_note.file_id
        file_type = "video_note"
    else:
        logger.warning(f"[{user_id}] –ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞")
        await message.answer("‚ùå –¢–∏–ø –º–µ–¥–∏–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")
        return

    logger.info(f"[{user_id}] –û—Ç–ø—Ä–∞–≤–∏–ª {file_type}, file_id={file_id}")
    await state.update_data(file_id=file_id, file_type=file_type)

    try:
        habits = await get_habits_by_user(user_id)
        media_habits = [(h.id, h.name) for h in habits if h.confirm_type in ("media", "wake_time")]

        if not media_habits:
            logger.info(f"[{user_id}] –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            await message.answer("üòê –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á–µ—Ä–µ–∑ –º–µ–¥–∏–∞.")
            return

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text=name, callback_data=f"select_habit_{hid}")]
                for hid, name in media_habits
            ]
        )

        logger.info(f"[{user_id}] –ü–æ–∫–∞–∑–∞–Ω –≤—ã–±–æ—Ä –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è –º–µ–¥–∏–∞-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        await message.answer("–í—ã–±–µ—Ä–∏, –¥–ª—è –∫–∞–∫–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:", reply_markup=keyboard)
        await state.set_state(ConfirmHabit.waiting_for_selection)

    except Exception as e:
        logger.exception(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞.")
        await state.clear()

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–≤—ã—á–∫–∏
@router.callback_query(F.data.startswith("select_habit_"))
async def handle_habit_selection(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    try:
        data = await state.get_data()
        file_id = data.get("file_id")
        file_type = data.get("file_type")
        habit_id = int(callback.data.split("_")[-1])

        if not file_id or not file_type:
            logger.error(f"[{user_id}] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç file_id/file_type –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –º–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞.")
            await state.clear()
            return

        habit = await get_habit_by_id(habit_id)

        # ‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ wake_time
        if habit and habit.confirm_type == "wake_time":
            try:
                name = habit.name
                time_part = name.split("–≤")[1].strip()
                wake_time = datetime.strptime(time_part, "%H:%M").time()
                now = datetime.now(pytz.timezone("Europe/Kyiv")).time()
                latest_allowed = (datetime.combine(datetime.today(), wake_time) + timedelta(minutes=4)).time()

                if not (wake_time <= now <= latest_allowed):
                    logger.warning(f"[{user_id}] –ü–æ–∑–¥–Ω–µ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: now={now}, –¥–æ–ø—É—Å—Ç–∏–º–æ –¥–æ={latest_allowed}")
                    await callback.message.answer(
                        f"‚è∞ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å {wake_time.strftime('%H:%M')} –¥–æ {latest_allowed.strftime('%H:%M')}.\n–°–µ–≥–æ–¥–Ω—è —É–∂–µ –ø–æ–∑–¥–Ω–æ."
                    )
                    await state.clear()
                    return

            except Exception as e:
                logger.exception(f"[{user_id}] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ habit_id={habit_id}: {e}")
                await callback.message.answer("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –ø–æ–¥—ä–µ–º–∞.")
                await state.clear()
                return

        # ‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        progress_increased = await process_confirmation(
            user_id=user_id,
            habit_id=habit_id,
            file_id=file_id,
            file_type=file_type,
            bot=callback.bot
        )

        # üîÅ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ–±—â–∏–π —á–∞—Ç
        await send_to_public_chat(
            user=callback.from_user,
            habit_id=habit_id,
            file_id=file_id,
            file_type=file_type,
            bot=callback.bot
        )

        # üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if progress_increased:
            habit = await get_habit_by_id(habit_id)
            if habit.is_challenge and int(habit.done_days) >= int(habit.days):
                from services.challenge_service.complete_challenge import complete_challenge
                await complete_challenge(habit_id, user_id, callback.bot)
                logger.info(f"[{user_id}] –ó–∞–≤–µ—Ä—à–∏–ª —á–µ–ª–ª–µ–Ω–¥–∂ —á–µ—Ä–µ–∑ –º–µ–¥–∏–∞ (habit_id={habit_id})")
                return

        # ‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.answer(
            "‚ôªÔ∏è –í–∏–¥–µ–æ/—Ñ–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –∏–∑–º–µ–Ω—ë–Ω."
            if not progress_increased else
            "‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—ë–Ω."
        )

        logger.info(f"[{user_id}] –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª {file_type} –¥–ª—è habit_id={habit_id}")
        await callback.answer()

    except Exception as e:
        logger.exception(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è habit_id={habit_id}: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏", show_alert=True)
    finally:
        await state.clear()
