from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from repositories.video.video_repo import save_pending_video, get_pending_videos, approve_video
from states.upload_video import UploadVideoFSM 
import logging
from datetime import datetime
from config import ADMIN_IDS
from utils.ui import safe_replace_message, try_edit_message
from repositories.video.video_repo import delete_video, approve_video, count_pending_videos_by_user


logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(F.data == "review_pending_videos")
async def handle_review_videos(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True)
        return

    videos = await get_pending_videos()
    if not videos:
        await callback.message.answer("üì≠ –ù–µ—Ç –≤–∏–¥–µ–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
        return

    for video in videos:
        user_id = video["user_id"]                             # ‚úÖ
        video_link = video["video_link"]                       # ‚úÖ
        submitted_at = datetime.fromisoformat(video["submitted_at"]).strftime("%Y-%m-%d %H:%M")  # ‚úÖ
        approved = "‚úÖ –î–∞" if video["approved"] else "‚ùå –ù–µ—Ç"   # ‚úÖ

        text = (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>\n"
            f"üîó –°—Å—ã–ª–∫–∞: {video_link}\n"
            f"üìÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {submitted_at}\n"
            f"‚öôÔ∏è –û–¥–æ–±—Ä–µ–Ω–æ: {approved}"
        )

        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_video:{video['id']}"),
                types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_video:{video['id']}")
            ]
        ])

        await callback.message.answer(text, reply_markup=keyboard)

    await callback.answer()


# üîπ –°—Ç–∞—Ä—Ç FSM ‚Äî –∫–Ω–æ–ø–∫–∞ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ"
@router.callback_query(F.data == "upload_video")
async def start_video_upload(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    pending_count = await count_pending_videos_by_user(user_id)

    text = (
        "üìπ –í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (YouTube, Google Drive, Telegram –∏ —Ç.–¥.)"
        f"\n\nüïµÔ∏è –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {pending_count} –≤–∏–¥–µ–æ"
    )

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_upload")]
    ])

    await callback.message.answer(text, reply_markup=keyboard)
    await state.set_state(UploadVideoFSM.waiting_for_video_link)
    await callback.answer()

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏
@router.message(UploadVideoFSM.waiting_for_video_link, F.text)
async def handle_video_link(message: types.Message, state: FSMContext):
    video_url = message.text.strip()

    if not video_url.startswith("http"):
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    await save_pending_video(user_id=message.from_user.id, video_link=video_url)
    await message.answer("‚úÖ –¢–≤–æ–µ –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ñ–¥–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Ç –ê–¥–º–∏–Ω–∞.")
    await state.clear()

@router.callback_query(F.data == "cancel_upload")
async def cancel_upload(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await safe_replace_message(callback.message, "üö´ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()


@router.callback_query(F.data.startswith("reject_video:"))
async def handle_reject_video(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True)
        return

    video_id = int(callback.data.split(":")[1])
    await delete_video(video_id)  # —É–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ –∏–∑ –±–∞–∑—ã
    await try_edit_message(callback, text="‚ùå –í–∏–¥–µ–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
    await callback.answer("–í–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω–æ")

@router.callback_query(F.data.startswith("approve_video:"))
async def handle_approve_video(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True)
        return

    video_id = int(callback.data.split(":")[1])
    await approve_video(video_id)
    await try_edit_message(callback, text="‚úÖ –í–∏–¥–µ–æ –æ–¥–æ–±—Ä–µ–Ω–æ.")
    await callback.answer("–û–¥–æ–±—Ä–µ–Ω–æ")