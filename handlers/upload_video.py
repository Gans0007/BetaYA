from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from repositories.video.video_repo import save_pending_video, get_pending_videos, approve_video
from states.upload_video import UploadVideoFSM 
import logging
from aiogram import Bot
from datetime import datetime
from config import ADMIN_IDS
from utils.ui import safe_replace_message, try_edit_message
from repositories.video.video_repo import get_pending_video_by_id
from repositories.video.video_repo import delete_video, approve_video, count_pending_videos_by_user
from services.monetization.reward_service import add_reward

logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(F.data == "review_pending_videos")
async def handle_review_videos(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True)
        return

    logger.info(f"[ADMIN] üîç –ê–¥–º–∏–Ω {callback.from_user.id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
    videos = await get_pending_videos()
    if not videos:
        await callback.message.answer("üì≠ –ù–µ—Ç –≤–∏–¥–µ–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
        logger.info(f"[ADMIN] üì≠ –ê–¥–º–∏–Ω {callback.from_user.id}: –Ω–µ—Ç –≤–∏–¥–µ–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
        return

    for video in videos:
        user_id = video["user_id"]
        video_link = video["video_link"]
        submitted_at = video["submitted_at"].strftime("%Y-%m-%d %H:%M")
        approved = "‚úÖ –î–∞" if video["approved"] else "‚ùå –ù–µ—Ç"

        text = (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>\n"
            f"üîó –°—Å—ã–ª–∫–∞: {video_link}\n"
            f"üìÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {submitted_at}\n"
            f"‚öôÔ∏è –û–¥–æ–±—Ä–µ–Ω–æ: {approved}"
        )

        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_video:{video['id']}"),
                types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_video:{video['id']}")
            ]
        ])

        await callback.message.answer(text, reply_markup=keyboard)

    await callback.answer()


@router.callback_query(F.data == "upload_video")
async def start_video_upload(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    pending_count = await count_pending_videos_by_user(user_id)

    logger.info(f"[VIDEO] üü° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ. –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {pending_count}")
    
    text = (
        "üìπ –í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å –æ—Ç–º–µ—Ç–∫–æ–π –±–æ—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞(TikTok, Instagram, Telegram –∏ —Ç.–¥.)"
        f"\n\nüïµÔ∏è –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {pending_count} –≤–∏–¥–µ–æ"
    )

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_upload")]
    ])

    await callback.message.answer(text, reply_markup=keyboard)
    await state.set_state(UploadVideoFSM.waiting_for_video_link)
    await callback.answer()


@router.message(UploadVideoFSM.waiting_for_video_link, F.text)
async def handle_video_link(message: types.Message, state: FSMContext):
    video_url = message.text.strip()

    if not video_url.startswith("http"):
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        logger.warning(f"[VIDEO] üö´ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç {message.from_user.id}: {video_url}")
        return

    await save_pending_video(user_id=message.from_user.id, video_link=video_url)
    await message.answer("‚úÖ –¢–≤–æ–µ –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ñ–¥–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Ç –ê–¥–º–∏–Ω–∞.")
    logger.info(f"[VIDEO] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–≥—Ä—É–∑–∏–ª –≤–∏–¥–µ–æ: {video_url}")
    await state.clear()


@router.callback_query(F.data == "cancel_upload")
async def cancel_upload(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await safe_replace_message(callback.message, "üö´ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    logger.info(f"[VIDEO] üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ")
    await callback.answer()


@router.callback_query(F.data.startswith("reject_video:"))
async def handle_reject_video(callback: types.CallbackQuery, bot: Bot):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True)
        return

    video_id = int(callback.data.split(":")[1])
    logger.info(f"[ADMIN] ‚ùå –ê–¥–º–∏–Ω {callback.from_user.id} –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤–∏–¥–µ–æ {video_id}")

    video = await get_pending_video_by_id(video_id)
    if video:
        try:
            await bot.send_message(
                video["user_id"],
                "‚ùå –í–∞—à–µ –≤–∏–¥–µ–æ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç."
            )
            logger.info(f"[VIDEO] ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {video['user_id']}")
        except Exception as e:
            logger.error(f"[VIDEO] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {video['user_id']}: {e}")

    await delete_video(video_id)
    await try_edit_message(callback, text="‚ùå –í–∏–¥–µ–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
    await callback.answer("–í–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω–æ")


@router.callback_query(F.data.startswith("approve_video:"))
async def handle_approve_video(callback: types.CallbackQuery, bot: Bot):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True)
        return

    video_id = int(callback.data.split(":")[1])
    await approve_video(video_id)

    video = await get_pending_video_by_id(video_id)
    if video:
        user_id = video["user_id"]
        logger.info(f"[ADMIN] ‚úÖ –ê–¥–º–∏–Ω {callback.from_user.id} –æ–¥–æ–±—Ä–∏–ª –≤–∏–¥–µ–æ {video_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        await add_reward(user_id=user_id, amount=0.10, reason="–í–∏–¥–µ–æ –æ–¥–æ–±—Ä–µ–Ω–æ", reward_type="usdt")

        try:
            await bot.send_message(user_id, "‚úÖ –í–∞—à–µ –≤–∏–¥–µ–æ –±—ã–ª–æ –æ–¥–æ–±—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
            await bot.send_message(
                user_id,
                "–¢–µ–±–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –æ—Ç YA \n\n‚≠ê <b>+3 XP</b> –∑–∞ —Å—Ç–∞—Ä–∞–Ω–∏–µ\n\nüí∏ <b>+0.10 USDT</b> –∑–∞ –≤–∫–ª–∞–¥ –≤ –∫–æ–º—å—é–Ω–∏—Ç–∏!",
                parse_mode="HTML"
            )
            logger.info(f"[VIDEO] ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã 2 —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"[VIDEO] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await try_edit_message(callback, text="‚úÖ –í–∏–¥–µ–æ –æ–¥–æ–±—Ä–µ–Ω–æ.")
    await callback.answer("–û–¥–æ–±—Ä–µ–Ω–æ")
