import logging
from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from utils.check_subs import check_subscription
from keyboards.menu import get_main_menu
from aiogram.exceptions import TelegramBadRequest
import config

from repositories.profiles.profile_repository import save_user, get_user
from repositories.referrals.referral_repo import save_referral

router = Router()
logger = logging.getLogger(__name__)

@router.message(Command("start"))
async def start_cmd(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    logger.info(f"[START] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")

    user = await get_user(user_id)

    if user is None and message.text and len(parts := message.text.split()) == 2 and parts[1].isdigit():
        referrer_id = int(parts[1])
        logger.info(f"[REFERRAL] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—à—ë–ª –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç {referrer_id}")

        try:
            await save_referral(referrer_id, user_id, bot)
            logger.info(f"[REFERRAL] ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å–≤—è–∑—å: {referrer_id} ‚Üí {user_id}")

            # ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
            try:
                inviter_msg = (
                    f"üî• –ü–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏—à—ë–ª –Ω–æ–≤—ã–π –±—Ä–∞—Ç: <b>{message.from_user.full_name}</b>\n"
                    f"–¢–µ–ø–µ—Ä—å –æ–Ω —Å –Ω–∞–º–∏ üí™"
                )
                await bot.send_message(referrer_id, inviter_msg, parse_mode="HTML")
                logger.info(f"[REFERRAL] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É {referrer_id}")
            except TelegramBadRequest as e:
                logger.warning(f"[REFERRAL] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {referrer_id}: {e}")

        except Exception as e:
            logger.error(f"[REFERRAL] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–≤—è–∑–∏ {referrer_id} ‚Üí {user_id}: {e}")
    else:
        logger.info(f"[REFERRAL] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞")
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        types.InlineKeyboardButton(
            text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{config.CHANNEL_USERNAME.strip('@')}"
        )
    )
    keyboard.row(
        types.InlineKeyboardButton(
            text="üí¨ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —á–∞—Ç", url=f"https://t.me/{config.CHAT_USERNAME.strip('@')}"
        )
    )
    keyboard.row(
        types.InlineKeyboardButton(
            text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subs"
        )
    )

    try:
        photo = FSInputFile("media/start.jpg")
        await message.answer_photo(
            photo=photo,
            caption=(
                "üëã –ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏.\n"
                "–î–æ–±–∞–≤–ª—è–µ—à—å –æ–¥–Ω—É ‚Äî –∏ –Ω–∞—á–∏–Ω–∞–µ—à—å —É–ª—É—á—à–∞—Ç—å —Å–µ–±—è.\n"
                "–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è¬ª.\n\n"
                "–ü—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏ –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.\n"
                "–û–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –æ–±—â–∏–π —á–∞—Ç —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º ‚Äî –¢–∞–∫ –º–æ–∂–Ω–æ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö –∏ —Å–∞–º–æ–º—É –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.\n\n"
                "–ë—Ä–∞—Ç, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º ‚Äî –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç –Ω–∏–∂–µ:\n"
            ),
            reply_markup=keyboard.as_markup()
        )
    except Exception as e:
        logger.critical(f"[START] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


@router.callback_query(lambda c: c.data == "check_subs")
async def handle_check_subscription(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    logger.info(f"[SUB_CHECK] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # ‚ö° –°–†–ê–ó–£ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã Telegram –Ω–µ –≤—ã—Ä—É–±–∏–ª
    try:
        await callback.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫—É...", show_alert=False)
    except Exception as e:
        logger.warning(f"[CALLBACK] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å Telegram –≤–æ–≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    try:
        sub_channel = await check_subscription(bot, user_id, config.CHANNEL_USERNAME)
        sub_chat = await check_subscription(bot, user_id, config.CHAT_USERNAME)
    except Exception as e:
        logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    if sub_channel and sub_chat:
        logger.info(f"[SUB_CHECK] –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        full_name = callback.from_user.full_name or "-"
        try:
            await save_user(user_id, full_name)
            logger.info(f"[DB] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ")
        except Exception as e:
            logger.error(f"[DB] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        await callback.message.answer(
            text=(
                "üß≠ <b>–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>:\n\n"
                "üìå <b>–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É Challenge</b> ‚Äî —Å–æ–∑–¥–∞–π –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É –∏ –Ω–∞—á–Ω–∏ –ø—Ä–æ–∫–∞—á–∫—É.\n\n"
                "üìå <b>–ê–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ</b> ‚Äî –∑–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ —Ç–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏.\n\n"
                "üìå <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏</b> ‚Äî —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö.\n"
                "–ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –∏–ª–∏ –∫—Ä—É–∂–æ—á–µ–∫ –ø—Ä—è–º–æ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º –∏ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É.\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ –ø–æ–ø–∞–¥—ë—Ç –≤ –æ–±—â–∏–π —á–∞—Ç —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.\n\n"
                "–£–¥–∞—á–∏, –¥—Ä—É–≥! üí™"
            ),
            parse_mode="HTML",
            reply_markup=get_main_menu()
        )
        return

    logger.info(f"[SUB_CHECK] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω (–∫–∞–Ω–∞–ª: {sub_channel}, —á–∞—Ç: {sub_chat})")

    text = "‚ùå –ë—Ä–∞—Ç, —Ç—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω:\n"
    if not sub_channel:
        text += f"üì¢ <a href='https://t.me/{config.CHANNEL_USERNAME.strip('@')}'>–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª</a>\n"
    if not sub_chat:
        text += f"üí¨ <a href='https://t.me/{config.CHAT_USERNAME.strip('@')}'>–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —á–∞—Ç</a>\n"

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        types.InlineKeyboardButton(
            text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{config.CHANNEL_USERNAME.strip('@')}")
    )
    keyboard.row(
        types.InlineKeyboardButton(
            text="üí¨ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —á–∞—Ç", url=f"https://t.me/{config.CHAT_USERNAME.strip('@')}")
    )
    keyboard.row(
        types.InlineKeyboardButton(
            text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subs")
    )

    await callback.message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")


    await callback.message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
    await callback.answer("–ü—Ä–æ–≤–µ—Ä—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", show_alert=True)
