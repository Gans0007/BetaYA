import os
import logging
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardMarkup, InlineKeyboardButton

from states.habit_states import HabitForm
from services.habits.habit_service import save_habit

logger = logging.getLogger(__name__)
router = Router()

cancel_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_fsm_habit")]]
)

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É"
@router.callback_query(lambda c: c.data == "add_habit_custom")
async def callback_start_habit(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[{callback.from_user.id}] –ù–∞–∂–∞–ª –Ω–∞ ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ë–µ–≥):", reply_markup=cancel_keyboard)
    await state.set_state(HabitForm.name)
    await callback.answer()

# 1. –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
@router.message(HabitForm.name)
async def process_name(message: Message, state: FSMContext):
    logger.info(f"[{message.from_user.id}] –í–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏: {message.text}")
    await state.update_data(name=message.text)
    await message.answer("üìÖ –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–∏? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20):", reply_markup=cancel_keyboard)
    await state.set_state(HabitForm.days)

# 2. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Ü–∏—Ñ—Ä—ã)
@router.message(HabitForm.days)
async def process_days(message: Message, state: FSMContext):
    if not message.text.isdigit():
        logger.warning(f"[{message.from_user.id}] –í–≤–µ–ª –Ω–µ—Ü–∏—Ñ—Ä–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–Ω–µ–π: {message.text}")
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20).", reply_markup=cancel_keyboard)
        return

    logger.info(f"[{message.from_user.id}] –í–≤–µ–ª –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏: {message.text} –¥–Ω–µ–π")
    await state.update_data(days=int(message.text))
    await message.answer("üìù –í–≤–µ–¥–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ë–µ–≥–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ –º–µ–Ω—å—à–µ –∫–∏–ª–æ–º–µ—Ç—Ä–∞):", reply_markup=cancel_keyboard)
    await state.set_state(HabitForm.description)

# 3. –û–ø–∏—Å–∞–Ω–∏–µ
@router.message(HabitForm.description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    data = await state.get_data()
    logger.info(f"[{message.from_user.id}] –í–≤–µ–ª –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏")

    summary = (
        f"‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b> –í–æ—Ç —á—Ç–æ —Ç—ã —É–∫–∞–∑–∞–ª:\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n"
        f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {data['days']} –¥–Ω–µ–π\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n"
        f"üß† –Ø –±—É–¥—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ–± —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–µ, —á—Ç–æ–±—ã —Ç—ã –Ω–µ —Å–±–∏–≤–∞–ª—Å—è —Å –ø—É—Ç–∏.\n\n"
        f"üëá <b>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å?</b>"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_habit")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="cancel_habit")]
    ])

    logger.info(f"[{message.from_user.id}] –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞: {data}")
    await message.answer(summary, reply_markup=keyboard, parse_mode="HTML")

# ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –ë–î
@router.callback_query(lambda c: c.data == "save_habit")
async def confirm_habit(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id
    logger.info(f"[{user_id}] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏: {data}")

    try:
        await save_habit(
            user_id=user_id,
            name=data['name'],
            days=int(data['days']),
            description=data['description']
        )
        await callback.message.edit_text("üî• –ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è!")
        logger.info(f"[{user_id}] –ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –≤ –ë–î")

    except Exception as e:
        logger.exception(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏: {e}")

    finally:
        await state.clear()
        await callback.answer()

# ‚ùå –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ (–≤ –∫–æ–Ω—Ü–µ)
@router.callback_query(lambda c: c.data == "cancel_habit")
async def cancel_habit(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"[{user_id}] –û—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø)")
    await state.clear()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="add_habit_custom")],
        [InlineKeyboardButton(text="üî• –í–∑—è—Ç—å Challenge", callback_data="take_challenge")]
    ])

    await callback.message.edit_text(
        "üö´ –ü—Ä–∏–≤—ã—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞.\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:",
        reply_markup=keyboard
    )
    await callback.answer()

# ‚ùå –û—Ç–º–µ–Ω–∞ FSM –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ
@router.callback_query(lambda c: c.data == "cancel_fsm_habit")
async def cancel_fsm_creation(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[{callback.from_user.id}] –û—Ç–º–µ–Ω–∏–ª FSM-–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏")
    await state.clear()
    await callback.message.edit_text("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()
