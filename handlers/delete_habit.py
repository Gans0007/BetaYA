import logging
from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from repositories.habits.habit_repo import delete_habit_by_id, get_habit_by_id, should_show_delete_button
from services.confirmations.confirmation_service import was_confirmed_today

logger = logging.getLogger(__name__)
router = Router()

# üîπ –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("delete_habit_"))
async def confirm_delete(callback: CallbackQuery):
    user_id = callback.from_user.id
    try:
        habit_id = int(callback.data.split("_")[-1])
        logger.info(f"[{user_id}] –ó–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ habit_id={habit_id}")

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"confirm_delete_{habit_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
        ]])

        await callback.message.edit_text("‚ö†Ô∏è –¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É?", reply_markup=keyboard)
        await callback.answer()

    except Exception as e:
        logger.exception(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", show_alert=True)

# üîπ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
@router.callback_query(F.data.startswith("confirm_delete_"))
async def delete_habit(callback: CallbackQuery):
    user_id = callback.from_user.id
    try:
        habit_id = int(callback.data.split("_")[-1])
        await delete_habit_by_id(habit_id)
        logger.info(f"[{user_id}] –£–¥–∞–ª–∏–ª –ø—Ä–∏–≤—ã—á–∫—É habit_id={habit_id}")
        await callback.message.edit_text("‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
        await callback.answer()
    except Exception as e:
        logger.exception(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏ habit_id={habit_id}: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", show_alert=True)

# üîπ –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ä—Ç–æ—á–∫–µ
@router.callback_query(F.data == "cancel_delete")
async def cancel_delete(callback: CallbackQuery):
    user_id = callback.from_user.id
    try:
        habit_id = int(callback.message.reply_markup.inline_keyboard[0][0].callback_data.split("_")[-1])
        logger.info(f"[{user_id}] –û—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ habit_id={habit_id}")

        habit = await get_habit_by_id(habit_id)
        if not habit:
            logger.warning(f"[{user_id}] –ü—Ä–∏–≤—ã—á–∫–∞ habit_id={habit_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è")
            await callback.message.edit_text("‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await callback.answer()
            return

        habit_id, name, days, description, done_days, is_challenge, confirm_type = habit
        title = "üî•<b>–ê–∫—Ç–∏–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂:</b>" if is_challenge else "‚ö°Ô∏è<b>–ê–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞:</b>"
        percent = round((done_days / days) * 100) if days > 0 else 0

        text = (
            f"{title}\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
            f"<b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {done_days} –∏–∑ {days} –¥–Ω–µ–π  <b>( {percent}% ) </b>"
        )

        # –ö–Ω–æ–ø–∫–∏
        buttons = [
            InlineKeyboardButton(
                text="‚ôªÔ∏è –ü–µ—Ä–µ–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" if await was_confirmed_today(user_id, habit_id) else "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data=f"confirm_done_{habit_id}"
            )
        ]

        if await should_show_delete_button(user_id, habit_id):
            buttons.append(
                InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å",
                    callback_data=f"delete_habit_{habit_id}"
                )
            )

        reply_markup = InlineKeyboardMarkup(inline_keyboard=[buttons])
        await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        logger.exception(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ habit_id={habit_id} –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ", show_alert=True)
