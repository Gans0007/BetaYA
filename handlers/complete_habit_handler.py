import logging
from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from repositories.habits.habit_repo import (
    get_habit_by_id,
    delete_habit_by_id,
    complete_habit_by_id,
    extend_habit_by_id
)
from services.habits.habit_card_renderer import render_habit_card

logger = logging.getLogger(__name__)
router = Router()

# üîπ –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É"
@router.callback_query(F.data.startswith("complete_habit_"))
async def handle_complete_request(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    habit_id = int(callback.data.split("_")[-1])

    try:
        habit = await get_habit_by_id(habit_id)
        if not habit:
            logger.error(f"[{user_id}] –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å (habit_id={habit_id})")
            await callback.message.answer("‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        done_days = habit.done_days
        habit_name = habit.name

        logger.info(f"[{user_id}] –ù–∞—á–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ '{habit_name}' (–¥–Ω–µ–π: {done_days})")

        if done_days < 15:
            text = f"üò¨ –£ —Ç–µ–±—è –º–µ–Ω—å—à–µ 15 –¥–Ω–µ–π –ø–æ –ø—Ä–∏–≤—ã—á–∫–µ ¬´{habit_name}¬ª, –æ–Ω–∞ –Ω–µ –±—É–¥–µ—Ç —É—á—Ç–µ–Ω–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–î–∞", callback_data=f"confirm_remove_{habit_id}"),
                InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"cancel_complete_{habit_id}")
            ]])
        else:
            text = f"–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É ¬´{habit_name}¬ª?"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–î–∞", callback_data=f"confirm_complete_{habit_id}"),
                InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"cancel_complete_{habit_id}")
            ]])

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.exception(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ habit_id={habit_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# üîπ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ (–º–µ–Ω–µ–µ 15 –¥–Ω–µ–π)
@router.callback_query(F.data.startswith("confirm_remove_"))
async def handle_remove_short_habit(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    habit_id = int(callback.data.split("_")[-1])

    try:
        await delete_habit_by_id(habit_id)
        logger.info(f"[{user_id}] –ó–∞–≤–µ—Ä—à–∏–ª –ø—Ä–∏–≤—ã—á–∫—É –±–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (habit_id={habit_id})")
        await callback.message.edit_text("‚ö†Ô∏è –ü—Ä–∏–≤—ã—á–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –Ω–µ —É—á—Ç–µ–Ω–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É! –ò –≤—Å—ë —Ä–∞–≤–Ω–æ —Ç—ã –∫–∞–º–µ–Ω—å ü§ù")
    except Exception as e:
        logger.exception(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏ habit_id={habit_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)

# üîπ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)
@router.callback_query(F.data.startswith("confirm_complete_"))
async def handle_confirm_complete(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    habit_id = int(callback.data.split("_")[-1])

    try:
        await complete_habit_by_id(habit_id)
        logger.info(f"[{user_id}] –ó–∞–≤–µ—Ä—à–∏–ª –ø—Ä–∏–≤—ã—á–∫—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (habit_id={habit_id})")
        await callback.message.edit_text("–ü—Ä–∏–≤—ã—á–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É! –ì–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π ü´Ç.")
    except Exception as e:
        logger.exception(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏ habit_id={habit_id}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏", show_alert=True)

# üîπ –û—Ç–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–∏–≤—ã—á–∫–∏
@router.callback_query(F.data.startswith("cancel_complete_"))
async def handle_cancel_complete(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    habit_id = int(callback.data.split("_")[-1])

    try:
        logger.info(f"[{user_id}] –û—Ç–º–µ–Ω–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ (habit_id={habit_id})")
        await render_habit_card(callback.message, user_id, habit_id)
    except Exception as e:
        logger.exception(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è habit_id={habit_id}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏", show_alert=True)

# üîπ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–ª–∏—Ç—å" ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@router.callback_query(F.data.startswith("extend_habit_"))
async def handle_extend_request(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    habit_id = int(callback.data.split("_")[-1])

    try:
        habit = await get_habit_by_id(habit_id)
        if not habit:
            logger.error(f"[{user_id}] –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–æ–¥–ª–∏—Ç—å (habit_id={habit_id})")
            await callback.message.edit_text("‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        logger.info(f"[{user_id}] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ (habit_id={habit_id})")

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[ 
            InlineKeyboardButton(text="–î–∞", callback_data=f"confirm_extend_{habit_id}"),
            InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"cancel_complete_{habit_id}")
        ]])

        await callback.message.edit_text("–ü—Ä–æ–¥–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –Ω–∞ 5 –¥–Ω–µ–π?", reply_markup=keyboard)

    except Exception as e:
        logger.exception(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ habit_id={habit_id}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è", show_alert=True)

# üîπ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
@router.callback_query(F.data.startswith("confirm_extend_"))
async def handle_confirm_extend(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    habit_id = int(callback.data.split("_")[-1])

    try:
        await extend_habit_by_id(habit_id)
        logger.info(f"[{user_id}] –ü—Ä–æ–¥–ª–∏–ª –ø—Ä–∏–≤—ã—á–∫—É –Ω–∞ 5 –¥–Ω–µ–π (habit_id={habit_id})")
        await render_habit_card(callback.message, user_id, habit_id)
    except Exception as e:
        logger.exception(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è habit_id={habit_id}: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", show_alert=True)
