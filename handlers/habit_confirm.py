from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from states.habit_states import ConfirmHabit
from config import PUBLIC_CHAT_ID
from datetime import datetime, timedelta
import pytz
import logging

from repositories.habits.habit_repo import get_habit_by_id
from services.confirmations.confirmation_service import (
    process_confirmation,
    send_to_public_chat,
    log_confirmation
)

logger = logging.getLogger(__name__)
router = Router()

cancel_keyboard = types.InlineKeyboardMarkup(
    inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_fsm_confirmation")]
    ]
)

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
@router.callback_query(F.data.startswith("confirm_done_"))
async def handle_confirm_callback(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    try:
        habit_id = int(callback.data.split("_")[-1])
        habit = await get_habit_by_id(habit_id)

        if not habit:
            logger.error(f"[{user_id}] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø—Ä–∏–≤—ã—á–∫—É habit_id={habit_id}")
            await callback.message.answer("‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        confirm_type = habit.confirm_type
        name = habit.name
        logger.info(f"[{user_id}] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø—Ä–∏–≤—ã—á–∫—É '{name}' (id={habit_id}, —Ç–∏–ø={confirm_type})")

        if confirm_type == "wake_time":
            try:
                time_part = name.split("–≤")[1].strip()
                wake_time = datetime.strptime(time_part, "%H:%M").time()
                now = datetime.now(pytz.timezone("Europe/Kyiv")).time()
                latest_allowed = (datetime.combine(datetime.today(), wake_time) + timedelta(minutes=4)).time()

                if not (wake_time <= now <= latest_allowed):
                    logger.info(f"[{user_id}] –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è wake_time –¥–ª—è habit_id={habit_id}")
                    await callback.message.answer(
                        f"‚è∞ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å {wake_time.strftime('%H:%M')} –¥–æ {latest_allowed.strftime('%H:%M')}.\n–°–µ–≥–æ–¥–Ω—è —É–∂–µ –ø–æ–∑–¥–Ω–æ."
                    )
                    await callback.answer()
                    return
            except Exception:
                logger.exception(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏ habit_id={habit_id}")
                await callback.message.answer("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –ø–æ–¥—ä–µ–º–∞.")
                await callback.answer()
                return

        await state.update_data(habit_id=habit_id, confirm_type=confirm_type)
        await callback.message.answer(
            f"üìπ –ü—Ä–∏—à–ª–∏ –∫—Ä—É–∂–æ–∫ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏: {name}",
            reply_markup=cancel_keyboard
        )
        logger.info(f"[{user_id}] –ó–∞–ø—É—â–µ–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ –º–µ–¥–∏–∞ –¥–ª—è habit_id={habit_id}")
        await state.set_state(ConfirmHabit.waiting_for_media)
        await callback.answer()

    except Exception:
        logger.exception(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏", show_alert=True)

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ/–∫—Ä—É–∂–∫–∞
@router.message(ConfirmHabit.waiting_for_media, F.video | F.video_note | F.photo)
async def handle_habit_video(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        data = await state.get_data()
        habit_id = data.get("habit_id")
        confirm_type = data.get("confirm_type")

        if habit_id is None:
            logger.critical(f"[{user_id}] FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ: habit_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return

        # –¢–∏–ø —Ñ–∞–π–ª–∞
        if message.video:
            file_id = message.video.file_id
            file_type = "video"
        elif message.video_note:
            file_id = message.video_note.file_id
            file_type = "video_note"
        elif message.photo:
            file_id = message.photo[-1].file_id
            file_type = "photo"
        else:
            logger.error(f"[{user_id}] –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ habit_id={habit_id}")
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ, –∫—Ä—É–∂–æ–∫ –∏–ª–∏ —Ñ–æ—Ç–æ.")
            return

        logger.info(f"[{user_id}] –û—Ç–ø—Ä–∞–≤–∏–ª {file_type} –¥–ª—è habit_id={habit_id}")

        if confirm_type == "wake_time":
            habit = await get_habit_by_id(habit_id)
            name = habit.name
            try:
                time_part = name.split("–≤")[1].strip()
                wake_time = datetime.strptime(time_part, "%H:%M").time()
            except Exception:
                logger.exception(f"[{user_id}] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏–≤—ã—á–∫–∏ '{name}'")
                await message.answer("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –ø–æ–¥—ä–µ–º–∞.")
                return

            now = datetime.now(pytz.timezone("Europe/Kyiv")).time()
            latest_allowed = (datetime.combine(datetime.today(), wake_time) + timedelta(minutes=4)).time()
            if not (wake_time <= now <= latest_allowed):
                logger.info(f"[{user_id}] –ú–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è habit_id={habit_id}")
                await message.answer(
                    f"‚è∞ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å {wake_time.strftime('%H:%M')} –¥–æ {(latest_allowed).strftime('%H:%M')}.\n–°–µ–≥–æ–¥–Ω—è —É–∂–µ –ø–æ–∑–¥–Ω–æ."
                )
                return

        progress_increased = await process_confirmation(
            user_id=user_id,
            habit_id=habit_id,
            file_id=file_id,
            file_type=file_type,
            bot=message.bot
        )

        await send_to_public_chat(
            user=message.from_user,
            habit_id=habit_id,
            file_id=file_id,
            file_type=file_type,
            bot=message.bot
        )

        if progress_increased:
            habit = await get_habit_by_id(habit_id)
            if habit.is_challenge and int(habit.done_days) >= int(habit.days):
                from services.challenge_service.complete_challenge import complete_challenge
                logger.info(f"[{user_id}] –ó–∞–≤–µ—Ä—à–∏–ª —á–µ–ª–ª–µ–Ω–¥–∂ habit_id={habit_id}")
                await complete_challenge(habit_id, user_id, message.bot)
                return

        logger.info(f"[{user_id}] {file_type} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –¥–ª—è habit_id={habit_id}")
        await message.answer(
            "‚ôªÔ∏è –ú–µ–¥–∏–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –∏–∑–º–µ–Ω—ë–Ω."
            if not progress_increased else
            "‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—ë–Ω."
        )

    except Exception:
        logger.exception(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞ –¥–ª—è habit_id={habit_id}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏.")
    finally:
        await state.clear()

@router.callback_query(F.data == "cancel_fsm_confirmation")
async def cancel_fsm_confirmation(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    logger.info(f"[{callback.from_user.id}] –û—Ç–º–µ–Ω–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ —á–µ—Ä–µ–∑ FSM")
    await callback.message.edit_text("üö´ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()
